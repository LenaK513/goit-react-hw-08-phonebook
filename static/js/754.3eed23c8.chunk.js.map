{"version":3,"file":"static/js/754.3eed23c8.chunk.js","mappings":"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","sources":["components/Button/Button.styled.jsx","components/Button/Button.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  text-transform: uppercase;\n  color: #fff;\n  background-color: #f74002;\n  padding: 7px 10px;\n  border: transparent;\n  border-radius: 5px;\n`;\n","import { Button } from './Button.styled';\n\nexport const Btn = ({ children }) => {\n  return <Button>{children}</Button>;\n};\n","export const selectContacts = state => state.contacts.contacts;\n\nexport const selectInputFilter = state => state.filter.text;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from '@emotion/styled';\n\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  height: 25px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Btn } from 'components/Button/Button';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport { FormStyle, Input } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const name = form.elements['name'].value;\n\n    const number = String(form.elements['number'].value);\n\n    const normalizedName = name.toLowerCase();\n\n    const compareNames = contacts?.find(\n      contactToCompare =>\n        contactToCompare.name?.toLowerCase() === normalizedName\n    );\n\n    if (compareNames) {\n      alert(`${name} is already in the list of contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <div>\n      <FormStyle onSubmit={handleSubmit}>\n        <label htmlFor=\"1\"> Name</label>\n\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id=\"1\"\n        />\n        <label htmlFor=\"2\">Phone</label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id=\"2\"\n        />\n        <Btn type=\"submit\">Add contact </Btn>\n      </FormStyle>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  handleSubmit: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  font-weight: 500;\n  margin-bottom: 4px;\n`;\n\nexport const Button = styled.button`\n  text-transform: uppercase;\n  color: #fff;\n  background-color: #f74002;\n  padding: 5px 7px;\n  border: transparent;\n  border-radius: 5px;\n  margin-left: 5px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Item, Button } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <Item id={id} key={id}>\n      {name} : {number}\n      <Button onClick={() => onDeleteContact(id)}>Delete</Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectInputFilter } from 'redux/contacts/selectors';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  console.log(contacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filter = useSelector(selectInputFilter);\n\n  const getContactFromFilter = (contacts, filter) => {\n    let normalizedFilter = filter?.toLowerCase();\n\n    return contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getContactFromFilter(contacts, filter);\n\n  return (\n    <List>\n      <h2>Contacts</h2>\n      {visibleContacts.length > 0 &&\n        visibleContacts.map(({ id, name, number }) => (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={() => dispatch(deleteContact(id))}\n          ></ContactItem>\n        ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  getContactFromFilter: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const InputFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  font-weight: 500;\n  margin-top: 30px;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filterSlice';\n// import { getInputFilter } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { InputFilter } from './Filter.styled';\nimport { Input } from 'components/ContactForm/ContactForm.styled';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  // const filter = useSelector(getInputFilter);\n  // console.log(filter);\n\n  const handleFilterCheck = event =>\n    dispatch(setStatusFilter(event.currentTarget.value));\n\n  return (\n    <InputFilter>\n      Find contacts by name\n      <Input type=\"text\" onChange={handleFilterCheck} />\n    </InputFilter>\n  );\n};\n\nFilter.propTypes = {\n  handleFilterCheck: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin-top: 20px;\n  margin-left: 40px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading, selectError } from 'redux/contacts/selectors';\nimport { Wrapper } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts);\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactForm />\n      <ContactList />\n      <Filter />\n    </Wrapper>\n  );\n}\n"],"names":["Button","styled","Btn","children","selectContacts","state","contacts","selectInputFilter","filter","text","selectLoading","isLoading","selectError","error","FormStyle","Input","ContactForm","dispatch","useDispatch","useSelector","onSubmit","event","preventDefault","form","currentTarget","name","elements","value","number","String","normalizedName","toLowerCase","find","contactToCompare","alert","addContact","reset","htmlFor","type","pattern","title","required","id","Item","ContactItem","onDeleteContact","onClick","List","ContactList","console","log","useEffect","fetchContacts","visibleContacts","normalizedFilter","contact","includes","getContactFromFilter","length","map","deleteContact","InputFilter","Filter","onChange","setStatusFilter","Wrapper","Contacts"],"sourceRoot":""}